
using System;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Net.WebSockets;
using System.Text;
using System.Threading;
using System.Timers;
using Timer = System.Timers.Timer;

namespace JanoschR.Neosoid {
    public class NeosWS : IDisposable {
        protected HttpListener listener;
        protected HttpListenerContext context;
        protected HttpListenerWebSocketContext wsContext;
        protected CancellationTokenSource asyncReceiveCancellationToken;
        protected Thread thread;

        protected WebSocket socket;
        protected bool ready = false;

        public void SendMessage (string message) {
            if (!ready) return;
            if (socket == null) return;
            if (socket.State != WebSocketState.Open) return;

            Logger.DebugInfo($"+> {message}");

            try {
                var type = WebSocketMessageType.Text; var token = CancellationToken.None;
                socket.SendAsync(message.ToArraySegmentBuffer(), type, true, token).Wait();
            } catch (Exception) {

                Logger.DebugWarn("SendAsync threw a hissy fit -- Connection must have closed without us noticing...");
                socket = null;
                ready = false;

                return;
            }
        }

        public void Start (int port) {
            listener = new HttpListener();
            listener.Prefixes.Add($"http://localhost:{port}/");
            listener.Start();

            thread = new Thread(() => {
                context = listener.GetContext();
                if (context.Request.IsWebSocketRequest) {
                    wsContext = context.AcceptWebSocketAsync(null).WaitForResult();
                    if (wsContext == null) {
                        Logger.DebugWarn("wsContext was not retrieved properly!");
                        socket = null;
                        ready = false;
                        return;
                    }

                    socket = wsContext.WebSocket;

                    Logger.Info($"Incoming connection created: {wsContext.RequestUri}");
                    ready = true;

                    while (true) {
                        if (!ready) break;
                        if (socket == null) break;
                        if (socket.State != WebSocketState.Open) break;

                        try {
                            Thread.Sleep(100);
                        } catch (Exception) {
                            Logger.DebugWarn("Somebody has awoken NeosWS from its slumber!");
                        }
                    }

                    ready = false;
                    Logger.Warn("Incoming connection closed.");
                }
            });

            thread.Start();
        }

        protected void WaitWhile (int msTimeout, Func<bool> wait) {
            while (wait.Invoke()) {
                Thread.Sleep(msTimeout);
            }
        }

        public void WaitForConnection (int msTimeout = 100) {
            WaitWhile(msTimeout, () => socket == null);
        }

        public void WaitForClose (int msTimeout = 100) {
            WaitWhile(msTimeout, () => {
                if (socket == null) return false;
                return socket.State == WebSocketState.Open;
            });
        }

        public Thread GetThread() {
            return thread;
        }
        public WebSocket GetSocket() {
            return socket;
        }

        public void Close() {
            Logger.Info("Disposing NeosWS...");
            ready = false;

            if (socket != null) {
                var status = WebSocketCloseStatus.NormalClosure;
                socket.CloseAsync(status, "WSS was disposed.", CancellationToken.None).Wait();
            }
        }

        public void Dispose() {
            Logger.Info("Disposing NeosWS...");
            ready = false;

            try {
                if (thread != null) {
                    thread.Interrupt();
                }
            } finally {
                Close();
            }
        }
    }
}
